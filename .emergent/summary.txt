<analysis>
The AI engineer's work primarily focused on expanding the ProFireManager application by implementing a comprehensive Indisponibilités (unavailabilities) feature. This involved developing intricate backend logic for generating schedules based on specific Quebec firefighter patterns (Montreal 7/24, Quebec 10/14) and a flexible frontend UI for managing these entries, including manual input and reset options. The engineer also tackled significant frontend UI/UX enhancements, such as enlarging the calendar, renaming buttons, removing statistics, and improving date display consistency. A substantial part of the work involved persistent debugging of deployment issues and, crucially, addressing recurring, intermittent login problems. Despite multiple attempts to fix the login flow (token handling, error redirection), the issue persisted, especially in production. The trajectory concludes with the AI proposing a complete refactoring of the authentication system to use bcrypt, aiming for a more robust and stable solution, following user frustration and a request for simplification.
</analysis>

<product_requirements>
ProFireManager is a web application for Canadian fire departments to manage personnel, schedules, and automated replacements.

**Key Functional Areas & Recent Developments:**
1.  **Multi-Tenant & Super Admin**: Tenant lifecycle management (creation, edit, deletion), Super Admin dashboard for overall statistics, initial admin account creation.
2.  **User & Profile Management**: Tenant-aware account creation, EPI management, and password change functionality. Mes disponibilités module accessible by all part-time personnel.
3.  **Planning Module**: Enhanced shift display, Attribution renamed to Planning. Admin/supervisors can manage availabilities/unavailabilities for others, including recurring entries. Automatic and advanced manual assignments were fixed. Monthly planning view date offset corrected.
    *   **Indisponibilités Feature**: Generate unavailabilities based on Montreal 7/24 (28-day cycle, starts Monday Red) and Quebec 10/14 (28-day cycle, 13 working days), for specific teams and years (initially rest of 2025, then 2026+). Manual input, modification, deletion, and selective reset options (all/generated, by period: week/month/year). Display origin (manual/generated).
    *   **UI/UX Improvements**: Enlarged calendar view, renamed Générer selon horaire to Gérer indisponibilités (with manual input), renamed Configurer manuellement to Gérer disponibilités (fixed to disponible status), reordered buttons, removed statistics counters, and enabled date click details.
4.  **Deployment & Stability**: Ongoing debugging of Vercel/Render sync issues, CORS, API validation. Persistent login problems (401/403 errors) led to authentication system refactoring proposal.
5.  **Mobile App with Push Notifications**: Implement native push notifications via Capacitor for iOS/Android (transparent integration) with Firebase Cloud Messaging. Priority on Remplacement disponible notifications.
</product_requirements>

<key_technical_concepts>
-   **Full-Stack Development**: React (frontend), FastAPI (Python backend), MongoDB (data persistence).
-   **UI/UX**: Shadcn UI, Tailwind CSS.
-   **Data Management**: Pydantic models, JWT for authentication (SHA256 hashing, proposed bcrypt).
-   **Multi-Tenant Architecture**: Tenant-aware routing.
-   **Deployment**: Render, Vercel, GitHub (source of recurring issues).
-   **Mobile Integration**: Capacitor (PWA wrapper), Firebase Cloud Messaging (FCM) for push notifications.
-   **Date Handling**: UTC for consistency across UI views.
</key_technical_concepts>

<code_architecture>

-   ****: Stores backend environment variables.
-   ****: Created to store Firebase Admin SDK private key for backend authentication.
-   ****:
    -   **Importance**: Main FastAPI application handling all API logic.
    -   **Changes**:
        -   Updated  model with .
        -   Added  and  Pydantic models.
        -   Integrated Firebase Admin SDK for push notifications.
        -   New API routes:  (for unavailability generation),  (for reset/deletion),  (for registering FCM tokens),  (for sending notifications).
        -   Corrected unavailability generation logic for Montreal (7 working days/cycle) and Quebec (13 working days/cycle).
        -   Authentication functions (login, password change) were reviewed and confirmed to use simple SHA256.
-   ****:
    -   **Importance**: Main React component managing application state, routing, and core features.
    -   **Changes**:
        -   **Authentication**: Enhanced 's error handling for 401/403 to trigger full logout and redirect to login, and  function now clears more local storage.
        -   **Multi-User Availabilities**: Added  state;  module now navigates to  for a selected user, and  adapts its title, displays a Return button, and targets  for all operations. Removed old management modal from .
        -   **Mes disponibilités Module UI/Logic**:
            -   Implemented states and functions for unavailability generation () and manual input ().
            -   Implemented reset functionality () with period and type filtering.
            -   Buttons renamed (Générer selon horaire to Gérer indisponibilités; Configurer manuellement to Gérer disponibilités).
            -   Gérer indisponibilités modal now has tabs for generation and manual input.
            -   Gérer disponibilités modal no longer has a statut selector (fixed to disponible).
            -   Removed statistics counters.
            -   Fixed date display offset and  to use UTC for calendar consistency.
            -   Multiple JSX structural fixes for modal rendering.
-   ****:
    -   **Importance**: Global styles.
    -   **Changes**: Modified  and  for a larger, more readable calendar display.
-   ****:
    -   **Importance**: Centralized API call utility.
    -   **Changes**: Improved error handling to redirect on both 401 and 403 API responses.
-   ****:
    -   **Importance**: Placeholder for frontend push notification handling.
    -   **Changes**: Created, but currently empty.
-   ****:
    -   **Importance**: Manages frontend dependencies.
    -   **Changes**: Added Capacitor related packages (, , , ). Also added  to backend .
-   ****:
    -   **Importance**: Configuration for Capacitor to build native mobile applications.
    -   **Changes**: Initialized and configured with push notification plugin settings.
-   ****:
    -   **Importance**: Firebase configuration file for the Android Capacitor project.
    -   **Changes**: Created with user-provided content.
-   ****:
    -   **Importance**: Firebase configuration file for the iOS Capacitor project.
    -   **Changes**: Created with user-provided content.
-   ****:
    -   **Importance**: Provides instructions for the user to set up Apple and Google developer accounts.
    -   **Changes**: Created by the AI engineer.
</code_architecture>

<pending_tasks>
-   Implement the frontend logic for push notification registration and reception using  and Capacitor.
-   Implement specific push notification sending logic in the backend for Remplacement disponible and other priority events.
-   Guide the user through Apple and Google developer account setup and mobile app publication.
-   **Address the persistent login issues in production by refactoring the authentication system to use bcrypt.**
</pending_tasks>

<current_work>
The AI engineer was most recently focused on resolving persistent, intermittent login issues reported by the user, particularly in the production environment. Initial debugging efforts involved checking JWT token expiration, enhancing local storage cleanup during logout and error handling (401/403 responses) in the frontend's  and . While these changes improved the local login experience, the problem persisted in production.

Upon invoking the , it was diagnosed that the password hash for the  user in the *production database* was incorrect, causing 401 errors. However, the user questioned this diagnosis, stating the hash was correct and requested a simpler or completely redesigned authentication system. Acknowledging the user's frustration with the recurring problem, the AI engineer proposed a comprehensive refactoring of the authentication system. This plan includes:
1.  Replacing the current SHA256 hashing with .
2.  Simplifying the login route.
3.  Improving error management.
4.  Adding clearer debugging logs.
This proposal represents the immediate next step, pending user confirmation, to provide a more stable and robust authentication mechanism.
</current_work>

<optional_next_step>
Implement the proposed refactor of the authentication system by replacing the current SHA256 hashing with bcrypt in the backend.
</optional_next_step>
