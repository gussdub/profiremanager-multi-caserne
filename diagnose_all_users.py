#!/usr/bin/env python3
"""
Script de diagnostic pour identifier les utilisateurs ayant des comp√©tences mal plac√©es.
V√©rifie si des comp√©tences (TPI, classe 4a, pompier 1, premiers r√©pondants, etc.)
sont stock√©es dans le champ 'formations' au lieu du champ 'competences'.
"""

import asyncio
from motor.motor_asyncio import AsyncIOMotorClient
import os
from dotenv import load_dotenv
from pathlib import Path

# Charger les variables d'environnement
ROOT_DIR = Path(__file__).parent / "backend"
load_dotenv(ROOT_DIR / '.env')

# Connexion MongoDB
mongo_url = os.environ['MONGO_URL']
client = AsyncIOMotorClient(mongo_url)
db_name = os.environ.get('DB_NAME', 'profiremanager')
db = client[db_name]

# Liste des comp√©tences connues (examens, certifications) qui ne devraient PAS √™tre dans 'formations'
# Ajoutez d'autres comp√©tences si n√©cessaire
COMPETENCES_CONNUES = [
    "TPI",  # Technicien en Pr√©vention Incendie
    "classe 4a",
    "classe 4A",
    "Classe 4a",
    "Classe 4A",
    "pompier 1",
    "Pompier 1",
    "Pompier I",
    "pompier I",
    "premiers r√©pondants",
    "Premiers R√©pondants",
    "premiers repondants",
    "Premiers repondants",
    "PR",  # Abr√©viation pour premiers r√©pondants
    "RCR",  # R√©animation CardioRespiratoire
    "DEA",  # D√©fibrillateur Externe Automatis√©
    "SIMDUT",
    "Travail en hauteur",
    "travail en hauteur",
]

async def diagnose_users():
    """Diagnostique tous les utilisateurs et identifie ceux avec des comp√©tences mal plac√©es"""
    
    print("=" * 80)
    print("DIAGNOSTIC DES UTILISATEURS - COMP√âTENCES MAL PLAC√âES")
    print("=" * 80)
    print()
    
    # R√©cup√©rer tous les utilisateurs
    users = await db.users.find({}).to_list(None)
    
    print(f"üìä Total d'utilisateurs trouv√©s: {len(users)}")
    print()
    
    # Compteurs
    users_with_issues = []
    total_misplaced = 0
    
    for user in users:
        user_id = user.get('id')
        nom = user.get('nom', 'N/A')
        prenom = user.get('prenom', 'N/A')
        email = user.get('email', 'N/A')
        formations = user.get('formations', [])
        competences_field = user.get('competences', [])  # V√©rifier si le champ existe
        
        # V√©rifier les formations pour des comp√©tences mal plac√©es
        misplaced_competences = []
        for formation in formations:
            # Chercher des correspondances partielles (case insensitive)
            for competence in COMPETENCES_CONNUES:
                if competence.lower() in formation.lower():
                    misplaced_competences.append(formation)
                    break
        
        if misplaced_competences:
            users_with_issues.append({
                'user_id': user_id,
                'nom': nom,
                'prenom': prenom,
                'email': email,
                'misplaced': misplaced_competences,
                'formations': formations,
                'has_competences_field': 'competences' in user,
                'competences': competences_field
            })
            total_misplaced += len(misplaced_competences)
    
    # Afficher les r√©sultats
    if users_with_issues:
        print(f"‚ö†Ô∏è  {len(users_with_issues)} utilisateur(s) avec des comp√©tences mal plac√©es trouv√©(s):")
        print()
        
        for idx, user_info in enumerate(users_with_issues, 1):
            print(f"{'=' * 80}")
            print(f"Utilisateur #{idx}")
            print(f"{'=' * 80}")
            print(f"  ID:      {user_info['user_id']}")
            print(f"  Nom:     {user_info['prenom']} {user_info['nom']}")
            print(f"  Email:   {user_info['email']}")
            print(f"  Champ 'competences' existe: {'OUI' if user_info['has_competences_field'] else 'NON'}")
            
            if user_info['has_competences_field']:
                print(f"  Comp√©tences actuelles: {user_info['competences']}")
            
            print(f"  \n  ‚ùå Comp√©tences MAL PLAC√âES dans 'formations':")
            for comp in user_info['misplaced']:
                print(f"     - {comp}")
            
            print(f"  \n  üìã Toutes les formations actuelles:")
            for form in user_info['formations']:
                is_misplaced = form in user_info['misplaced']
                marker = "‚ùå" if is_misplaced else "‚úì"
                print(f"     {marker} {form}")
            print()
        
        print(f"{'=' * 80}")
        print(f"üìä R√âSUM√â")
        print(f"{'=' * 80}")
        print(f"  Utilisateurs affect√©s:           {len(users_with_issues)}")
        print(f"  Total de comp√©tences mal plac√©es: {total_misplaced}")
        print()
        
    else:
        print("‚úÖ Aucun utilisateur avec des comp√©tences mal plac√©es trouv√©!")
        print()
    
    # V√©rifier si le mod√®le User a un champ 'competences'
    print(f"{'=' * 80}")
    print("V√âRIFICATION DU MOD√àLE")
    print(f"{'=' * 80}")
    
    # √âchantillonner quelques utilisateurs pour voir la structure
    sample_users = users[:3] if users else []
    for user in sample_users:
        has_competences = 'competences' in user
        print(f"  Utilisateur: {user.get('prenom')} {user.get('nom')}")
        print(f"    - Champ 'formations': {len(user.get('formations', []))} entr√©es")
        print(f"    - Champ 'competences': {'EXISTE' if has_competences else 'N\'EXISTE PAS'}")
        if has_competences:
            print(f"      Contenu: {user.get('competences', [])}")
        print()
    
    print(f"{'=' * 80}")
    print("RECOMMANDATIONS")
    print(f"{'=' * 80}")
    
    if users_with_issues:
        print("1. Le mod√®le User doit avoir un champ 'competences' s√©par√© de 'formations'")
        print("2. Cr√©er un script de migration pour d√©placer les comp√©tences identifi√©es")
        print("3. Mettre √† jour le backend pour utiliser le champ 'competences' dans les v√©rifications")
    else:
        print("‚úÖ Aucune action requise - donn√©es correctes")
    
    print()

if __name__ == "__main__":
    asyncio.run(diagnose_users())
